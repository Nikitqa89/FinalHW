import os
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from transformer_model.generate import generate_text

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# üß† –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
user_settings = {}

DEFAULT_PARAMS = {
    "temperature": 1.0,
    "top_k": 40,
    "max_new_tokens": 200,
}

# =====================
# –ö–æ–º–∞–Ω–¥—ã Telegram
# =====================
async def set_commands(bot: Bot):
    commands = [
        types.BotCommand(command="start", description="–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º"),
        types.BotCommand(command="set", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"),
        types.BotCommand(command="params", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"),
        types.BotCommand(command="stanza", description="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É —Å—Ç—Ä–æ—Ñ—É"),
        types.BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
    ]
    await bot.set_my_commands(commands)

# =====================
# /start
# =====================
@dp.message(CommandStart())
async def start_handler(message: Message):
    user_id = message.from_user.id
    user_settings[user_id] = DEFAULT_PARAMS.copy()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å—Ç—Ä–æ–∫—É, –∏ —è –ø—Ä–æ–¥–æ–ª–∂—É –µ—ë —Å—Ç–∏—Ö–∞–º–∏ ‚ú®\n\n–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã ‚Äî –æ—Ç–ø—Ä–∞–≤—å /help")

# =====================
# /help
# =====================
@dp.message(Command("help"))
async def help_handler(message: Message):
    await message.answer(
        "üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n"
        "/set temperature=0.8 top_k=50 ‚Äî –∑–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n"
        "/params ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
        "/stanza ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É –ø–æ—ç—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä–æ—Ñ—É\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é"
    )

# =====================
# /set
# =====================
@dp.message(Command("set"))
async def set_params(message: Message):
    user_id = message.from_user.id
    text = message.text.lower().replace("/set", "").strip()

    if user_id not in user_settings:
        user_settings[user_id] = DEFAULT_PARAMS.copy()

    parts = text.split()
    updates = []
    for part in parts:
        if "=" in part:
            key, val = part.split("=", 1)
            if key in DEFAULT_PARAMS:
                try:
                    user_settings[user_id][key] = float(val)
                    updates.append(f"{key} = {val}")
                except ValueError:
                    pass

    if updates:
        await message.answer("üîß –û–±–Ω–æ–≤–ª–µ–Ω–æ:\n" + "\n".join(updates))
    else:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /set temperature=0.8 top_k=50")

# =====================
# /params
# =====================
@dp.message(Command("params"))
async def show_params(message: Message):
    user_id = message.from_user.id
    settings = user_settings.get(user_id, DEFAULT_PARAMS)
    text = "\n".join([f"{k}: {v}" for k, v in settings.items()])
    await message.answer(f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n{text}")

# =====================
# /stanza ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ <EOS>
# =====================
@dp.message(Command("stanza"))
async def stanza_handler(message: Message):
    user_id = message.from_user.id
    prompt = message.text.replace("/stanza", "").strip()
    params = user_settings.get(user_id, DEFAULT_PARAMS)

    try:
        text = generate_text(
            prompt=prompt,
            max_new_tokens=300,  # —Å –∑–∞–ø–∞—Å–æ–º, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ <EOS>
            temperature=params["temperature"],
            top_k=int(params["top_k"])
        )
        await message.answer(text)
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–æ—Ñ—ã]: {e}")
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§ñ")

# =====================
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
# =====================
@dp.message()
async def text_handler(message: Message):
    user_id = message.from_user.id
    prompt = message.text.strip()

    if not prompt:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Ö–æ—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å")
        return

    params = user_settings.get(user_id, DEFAULT_PARAMS)

    try:
        generated = generate_text(
            prompt=prompt,
            max_new_tokens=int(params["max_new_tokens"]),
            temperature=params["temperature"],
            top_k=int(params["top_k"])
        )
        await message.answer(generated)

    except ValueError as ve:
        await message.answer(str(ve))

    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏]: {e}")
        await message.answer("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")

# =====================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# =====================
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await set_commands(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")