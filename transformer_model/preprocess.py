"""
–ú–æ–¥—É–ª—å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏.

–§—É–Ω–∫—Ü–∏–∏:
- –û—á–∏—Å—Ç–∫–∞ –ø–æ—ç—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –º—É—Å–æ—Ä–∞
- –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å–∏–º–≤–æ–ª–æ–≤ (vocab)
- –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–µ–Ω–∑–æ—Ä—ã PyTorch
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
"""

import re
import torch
from config import *
import numpy as np

# ============================================
# üßπ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—ç—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
# ============================================

def preprocess_poetry(text: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç:
    - —É–¥–∞–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏, —Ä–µ–∫–ª–∞–º—É, —Å–Ω–æ—Å–∫–∏, –ª–∞—Ç–∏–Ω–∏—Ü—É –∏ —Ü–∏—Ñ—Ä—ã
    - —É–±–∏—Ä–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä—Å–∫–∏–µ –≤—Å—Ç–∞–≤–∫–∏ –∏ –Ω–µ—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∏–µ –≤—Å—Ç–∞–≤–∫–∏
    - —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    - —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ —Å—Ç—Ä–æ—Ñ–∞–º (–ø–æ –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–∞–º)
    """
    # –£–¥–∞–ª—è–µ–º URL –∏ —Ä–µ–∫–ª–∞–º—É
    text = re.sub(r'https?://\S+', '', text)
    text = re.sub(r'(—Å–∫–∞—á–∞–ª–∏.*?|–≤—Å–µ –∫–Ω–∏–≥–∏ –∞–≤—Ç–æ—Ä–∞.*?|–ø—Ä–∏—è—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è.*?|–±–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å.*?)\n', '', text, flags=re.IGNORECASE)

    # –£–¥–∞–ª—è–µ–º —Å–Ω–æ—Å–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    text = re.sub(r'\[\d+.*?\]', '', text)
    text = re.sub(r'\[.*?\]', '', text)  # –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ —Å–∫–æ–±–∫–∏ []

    # –£–¥–∞–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä—Å–∫–∏–µ –≤—Å—Ç–∞–≤–∫–∏ –∏ "–û—Ç —Ä–µ–¥–∞–∫—Ü–∏–∏"
    text = re.sub(r'–û—Ç —Ä–µ–¥–∞–∫—Ü–∏–∏.*?(\n{2,}|\Z)', '', text, flags=re.DOTALL | re.IGNORECASE)

    # –£–¥–∞–ª—è–µ–º –ª–∞—Ç–∏–Ω–∏—Ü—É, —Ü–∏—Ñ—Ä—ã, –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'[A-Za-z0-9]', '', text)
    text = re.sub(r'[^\n–ê-—è–Å—ë‚Äî.,:;!?()"\- ]+', '', text)

    # –£–¥–∞–ª—è–µ–º 3+ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫, –æ—Å—Ç–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å
    text = re.sub(r'\n{3,}', '\n\n', text)
    text = re.sub(r'[ ]{2,}', ' ', text)

    # –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –í –í–ï–†–•–ù–ï–ú –†–ï–ì–ò–°–¢–†–ï –¥–æ 7 —Å–ª–æ–≤
    if remove_titles:
        lines = text.splitlines()
        text = '\n'.join([
            line for line in lines
            if not (
                line.isupper()
                and len(line.strip().split()) <= 7
                and not any(p in line for p in '.,:;!?()')
            )
        ])

    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ (–º—É—Å–æ—Ä)
    text = '\n'.join([
        line for line in text.splitlines()
        if line.strip() and all(len(word) < 25 for word in line.split())
    ])

    # –£–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏/–±—É–∫–≤—ã
    text = '\n'.join([line for line in text.splitlines() if len(line.strip()) > 1])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ—Ñ—ã –ø–æ –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–∞–º
    stanzas = text.split('\n\n')
    clean_stanzas = [s.strip() for s in stanzas if len(s.strip().splitlines()) >= 2]
    return '<EOS>'.join(clean_stanzas).strip()

# ============================
# üî† –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è (vocab)
# ============================

def build_vocab(text):
    if "<EOS>" not in text:
        text += "<EOS>"  # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤–æ–π–¥—ë—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
    chars = sorted(list(set(text)))
    stoi = {ch: i for i, ch in enumerate(chars)}
    itos = {i: ch for ch, i in stoi.items()}
    return stoi, itos

# ===========================
# üîÅ –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ===========================

def encode(text, stoi):
    return [stoi[c] for c in text]

def decode(indices, itos):
    return ''.join([itos[i] for i in indices])

# ========================
# üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
# ========================

def prepare_data(text, stoi):
    data = torch.tensor(encode(text, stoi), dtype=torch.long)

    # –ò–Ω–¥–µ–∫—Å—ã –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–ª–∏–Ω–æ–π block_size
    indices = np.arange(len(data) - block_size)
    np.random.seed(42)
    np.random.shuffle(indices)

    # –†–∞–∑–±–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã 80/20
    split_idx = int(0.8 * len(indices))
    train_ix = indices[:split_idx]
    val_ix = indices[split_idx:]

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–Ω–∑–æ—Ä—ã
    train_data = torch.cat([data[i:i + block_size] for i in train_ix])
    val_data = torch.cat([data[i:i + block_size] for i in val_ix])

    return train_data, val_data

# ====================
# üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
# ====================

if __name__ == "__main__":
    with open(data_path, 'r', encoding='utf-8') as f:
        raw_text = f.read()

    clean_text = preprocess_poetry(raw_text)
    stoi, itos = build_vocab(clean_text)
    train_data, val_data = prepare_data(clean_text, stoi)

    torch.save((train_data, val_data, stoi, itos), 'data_prepared.pt')
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")